def savefig(f,box,combo,header):
    ##for k in range(len(quadrant)):
    ##fits.writeto(f[:-13] + "quad_" + str(k+1) + ".fits", quadrant[k] , clobber=True)
    #print "Creating file " + f[:-13] + "residual.fits"
    #fits.writeto(f[:-13]   + "residual.fits", box , header, clobber=True)   
    print "Creating file " + f[:-13] + "fullfig.fits"
    
    #fits.writeto(f[:-13]   + "test8.fits", combo, header, clobber=True)
    
    #test1 is code as is
    #test2 is:        quadI   = np.reshape(scidata[cent1-1:cent1+x1-1,cent2-1:cent2+y1-1], (x1,y1) )
       # quadII  = np.flipud( np.reshape(scidata[cent1-x1-1:cent1-1,cent2-1:cent2+y1-1], (x1,y1) ) )
       # quadIII = np.flipud( np.fliplr( np.reshape(scidata[cent1-x1-1:cent1-1,cent2-y1-1:cent2-1], (x1,y1) ) ) )
       # quadIV  = np.fliplr( np.reshape(scidata[cent1-1:cent1+x1-1,cent2-y1-1:cent2-1], (x1,y1) ) ) 

#############################################################

def newCoord():
    print "Opening coordinate files..."
    name = 'sn2008ge_all.txt'

    newxcoord = []
    newycoord = []
    data      = []
    circ      = []
    clos      = []
    comm      = []
    #x1 = 300
    #y1 = 350        
    cent1 = 3399.00 
    cent2 = 3371.00
    adj1  = cent2-y1
    adj2  = cent1-x1
    print "Adjusting coordinates..."
    data = np.loadtxt(name)
    
    #data = np.recfromcsv(filename, names=['a','a','a'])   
    for i in range(len(data)):
        newxcoord.append(data[i][0] - adj1)
        newycoord.append(data[i][1] - adj2)
        circ.append('circle(')
        comm.append(',')
        clos.append(',2)')

    np.savetxt('sn2008ge_newcoord_temp.reg', np.c_[circ,newxcoord,comm,newycoord,clos],fmt = "%s",
               header ='# Region file format: DS9 version 4.1 #', 
               comments = 'global color=cyan dashlist=8 3 width=1'
               ' font="helvetica 10 normal" select=1' \
               ' highlite=1 dash=0 fixed=0 edit=1 move=1 delete=1 include=1 source=1' \
               '\nimage;' )
    print "Done with this bizz-nich"    # truely, I hope no ones reads my code


#############################################################
        print "Establishing quadrants..."
        #if (title[m] == 'sn2008ge_f814w_lacosmic.fits'):
        #    cent1 = 3399.0
        #    cent2 = 3371.0
        #else:
        #    cent1 = 3399.0 #3399.971 #3400.000 #
        #    cent2 = 3371.0 #3371.539 #3371.000 #
        
        print "Center Point: (", cent1, ', ' , cent2 ,")"
        #quad1 = []
        #quad2 = []
        #quad3 = []
        #quad4 = []


        #np.savetxt("HIII0.txt", scidata[3385:3415, 3355:3385],fmt = "%1.4f")

"""
        # Looking at only the center of the galaxy
        litt1 = 3400.00 - 300 
        litt2 = 3371.00 - 300
        bottotop = []
        toptobot = []
        for n in range(600):
            for p in range(600):   
                bottotop.append(scidata[litt1+n][litt2+p])
                toptobot.append(scidata[litt1+600-n][litt2+600-p])
                
        lay     = np.reshape( bottotop , (600,600) )
        ers     = np.reshape( toptobot , (600,600) )
        
        quad = np.flipud(np.fliplr(np.matrix( ers - lay )))
        lay = np.matrix(lay)
        ers = np.matrix(ers)
        
        fits.writeto("center.fits", quad, head, clobber=True)
        fits.writeto("quad2.fits" , lay , head, clobber=True)
        fits.writeto("quad4.fits" , ers , head, clobber=True)
        """
        """
        #scidata = np.asmatrix(scidata)
        #print "Shape   ", np.shape(scidata)
        
        #print scidata[cent1][cent2] 
        #scidata[cent1][cent2] = 0
        #print scidata[cent1][cent2] 
        #print "Center  ", scidata[cent1][cent2]
        #print "OrgCen  ", scidata[3400][3371.0]
        #print "OrgCen  ", scidata[3400][3372.0]
        #print np.max(scidata)
        
        #print scidata[np.where(scidata.argmax() == 10689040)]
        #from numpy import unravel_index
        #print unravel_index(scidata.argmax(), scidata.shape)

        bx = []
        dx = []
        ax = []
        cx = []
        print "Begin subtraction process..."
        print "Center Point: (", cent1, ', ' , cent2 ,")"
        for n in range(x1):
            for p in range(y1):   
                bx.append(scidata[cent1-n][cent2+p])
                dx.append(scidata[cent1+n][cent2-p])
                #bx.append(scidata[3400.000-n][3371.000+p])
                #dx.append(scidata[3400.000+n][3371.000-p])
                #bx.append(scidata[3399.971-n][3371.539+p])
                #dx.append(scidata[3399.971+n][3371.539-p])

        for i in range(x2):
            for j in range(y2):
                ax.append(scidata[cent1+i][cent2+j])
                cx.append(scidata[cent1-i][cent2-j])
                #ax.append(scidata[3399.971+i][3371.539+j])
                #cx.append(scidata[3399.971-i][3371.539-j])  

        b     = np.reshape( bx , (x1,y1) )
        d     = np.reshape( dx , (x1,y1) )
   
        a     = np.reshape( ax , (x2,y2) )
        c     = np.reshape( cx , (x2,y2) )

        #top   = np.hstack([quadII, quadI])    
        #bot   = np.hstack([quadIII, quadIV])

        #savefig(title[m],box,combo,head)
#newCoord() 
 
x1 = 1000
y1 = 1000
ceny = 3371
cenx = 3399

halfx = 0
halfy = 0

n_pix = 1000
   
subx1 = cenx - n_pix
subx2 = cenx - 1
    
suby1 = ceny - n_pix
suby2 = ceny - 1
    
subx3 = cenx + halfx
subx4 = cenx + halfx + n_pix - 1
    
suby3 = ceny + halfy
suby4 = ceny + halfy + n_pix - 1
    

orig---
quadI    = np.reshape(scidata[subx3:subx4,suby3:suby4], (x1-1,y1-1) ) 
quadII   = np.flipud( np.reshape(scidata[subx1:subx2,suby3:suby4], (x1-1,y1-1) ) )
quadIII  = np.flipud( np.fliplr( np.reshape(scidata[subx1:subx2,suby1:suby2], (x1-1,y1-1) ) ) )
quadIV   = np.fliplr( np.reshape(scidata[subx3:subx4,suby1:suby2], (x1-1,y1-1) ) )

quadI   = np.reshape(scidata[cent1+1:cent1+n_pix+1,cent2+1:cent2+n_pix+1], (n_pix,n_pix) )
quadII  = np.flipud( np.reshape(scidata[cent1-n_pix-1:cent1-1,cent2+1:cent2+n_pix+1], (n_pix,n_pix) ) )
quadIII = np.flipud( np.fliplr( np.reshape(scidata[cent1-n_pix-1:cent1-1,cent2-n_pix-1:cent2-1], (n_pix,n_pix) ) ) )
quadIV  = np.fliplr( np.reshape(scidata[cent1+1:cent1+n_pix+1,cent2-n_pix-1:cent2-1], (n_pix,n_pix) ) ) 
---orig

quadI    = np.reshape(                      scidata[cenx + halfx:cenx + halfx + n_pix - 1,ceny + halfy:ceny + halfy + n_pix - 1], (x1-1,y1-1) ) 
quadII   = np.flipud( np.reshape(           scidata[cenx - n_pix:cenx - 1                ,ceny + halfy:ceny + halfy + n_pix - 1], (x1-1,y1-1) ) )
quadIII  = np.flipud( np.fliplr( np.reshape(scidata[cenx - n_pix:cenx - 1                ,ceny - n_pix:ceny - 1]                , (x1-1,y1-1) ) ) )
quadIV   = np.fliplr( np.reshape(           scidata[cenx + halfx:cenx + halfx + n_pix - 1,ceny - n_pix:ceny - 1]                , (x1-1,y1-1) ) )


quadI   = np.reshape(                      scidata[cent1+1      :cent1+n_pix+1,cent2+1      :cent2+n_pix+1], (n_pix,n_pix) )
quadII  = np.flipud( np.reshape(           scidata[cent1-n_pix-1:cent1-1      ,cent2+1      :cent2+n_pix+1], (n_pix,n_pix) ) )
quadIII = np.flipud( np.fliplr( np.reshape(scidata[cent1-n_pix-1:cent1-1      ,cent2-n_pix-1:cent2-1]      , (n_pix,n_pix) ) ) )
quadIV  = np.fliplr( np.reshape(           scidata[cent1+1      :cent1+n_pix+1,cent2-n_pix-1:cent2-1]      , (n_pix,n_pix) ) ) 
